// Code generated by MockGen. DO NOT EDIT.
// Source: glide/internal/pkg/utils (interfaces: ImageConverter)

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	context "context"
	io "io"
	repository_files "patreon/internal/microservices/files/files/repository/files"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageConverter is a mock of ImageConverter interface.
type MockImageConverter struct {
	ctrl     *gomock.Controller
	recorder *MockImageConverterMockRecorder
}

// MockImageConverterMockRecorder is the mock recorder for MockImageConverter.
type MockImageConverterMockRecorder struct {
	mock *MockImageConverter
}

// NewMockImageConverter creates a new mock instance.
func NewMockImageConverter(ctrl *gomock.Controller) *MockImageConverter {
	mock := &MockImageConverter{ctrl: ctrl}
	mock.recorder = &MockImageConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageConverter) EXPECT() *MockImageConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockImageConverter) Convert(arg0 context.Context, arg1 io.Reader, arg2 repository_files.FileName) (io.Reader, repository_files.FileName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(repository_files.FileName)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Convert indicates an expected call of Convert.
func (mr *MockImageConverterMockRecorder) Convert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockImageConverter)(nil).Convert), arg0, arg1, arg2)
}
