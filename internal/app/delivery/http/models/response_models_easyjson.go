// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http_models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	csrf_models "glide/internal/app/csrf/csrf_models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels(in *jlexer.Lexer, out *TokenResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = csrf_models.Token(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels(out *jwriter.Writer, in TokenResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels1(in *jlexer.Lexer, out *ResponseMessages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ResponseMessages, 0, 0)
			} else {
				*out = ResponseMessages{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 ResponseMessage
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels1(out *jwriter.Writer, in ResponseMessages) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMessages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMessages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMessages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMessages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels1(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels2(in *jlexer.Lexer, out *ResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "author":
			out.Author = string(in.String())
		case "is_viewed":
			out.IsViewed = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels2(out *jwriter.Writer, in ResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	if in.Picture != "" {
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"is_viewed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsViewed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels2(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels3(in *jlexer.Lexer, out *ResponseInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				in.Delim('[')
				if out.Category == nil {
					if !in.IsDelim(']') {
						out.Category = make([]string, 0, 4)
					} else {
						out.Category = []string{}
					}
				} else {
					out.Category = (out.Category)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Category = append(out.Category, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type_post_data":
			if in.IsNull() {
				in.Skip()
				out.TypePostData = nil
			} else {
				in.Delim('[')
				if out.TypePostData == nil {
					if !in.IsDelim(']') {
						out.TypePostData = make([]string, 0, 4)
					} else {
						out.TypePostData = []string{}
					}
				} else {
					out.TypePostData = (out.TypePostData)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.TypePostData = append(out.TypePostData, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels3(out *jwriter.Writer, in ResponseInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		if in.Category == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Category {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"type_post_data\":"
		out.RawString(prefix)
		if in.TypePostData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.TypePostData {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels3(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels4(in *jlexer.Lexer, out *ResponseChats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ResponseChats, 0, 0)
			} else {
				*out = ResponseChats{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 ResponseChat
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels4(out *jwriter.Writer, in ResponseChats) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseChats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseChats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseChats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseChats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels4(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels5(in *jlexer.Lexer, out *ResponseChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "companion":
			out.Companion = string(in.String())
		case "companion_avatar":
			out.CompanionAvatar = string(in.String())
		case "last_message":
			(out.LastMessage).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels5(out *jwriter.Writer, in ResponseChat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"companion\":"
		out.RawString(prefix)
		out.String(string(in.Companion))
	}
	{
		const prefix string = ",\"companion_avatar\":"
		out.RawString(prefix)
		out.String(string(in.CompanionAvatar))
	}
	{
		const prefix string = ",\"last_message\":"
		out.RawString(prefix)
		(in.LastMessage).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels5(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels6(in *jlexer.Lexer, out *ProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "about":
			out.About = string(in.String())
		case "age":
			out.Age = int64(in.Int64())
		case "country":
			out.Country = string(in.String())
		case "languages":
			if in.IsNull() {
				in.Skip()
				out.Languages = nil
			} else {
				in.Delim('[')
				if out.Languages == nil {
					if !in.IsDelim(']') {
						out.Languages = make([]string, 0, 4)
					} else {
						out.Languages = []string{}
					}
				} else {
					out.Languages = (out.Languages)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Languages = append(out.Languages, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels6(out *jwriter.Writer, in ProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int64(int64(in.Age))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"languages\":"
		out.RawString(prefix)
		if in.Languages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Languages {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels6(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels7(in *jlexer.Lexer, out *OkResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OK":
			out.Ok = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels7(out *jwriter.Writer, in OkResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OK\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ok))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OkResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OkResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OkResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OkResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels7(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels8(in *jlexer.Lexer, out *IdResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels8(out *jwriter.Writer, in IdResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IdResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IdResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IdResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IdResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels8(l, v)
}
func easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels9(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Err = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels9(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson316682a0EncodeGlideInternalAppDeliveryHttpModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson316682a0DecodeGlideInternalAppDeliveryHttpModels9(l, v)
}
