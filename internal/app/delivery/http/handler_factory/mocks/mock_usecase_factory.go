// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/delivery/http/handler_factory (interfaces: UsecaseFactory)

// Package mock_usecase_factory is a generated GoMock package.
package mock_usecase_factory

import (
	usecase_csrf "patreon/internal/app/csrf/usecase"
	attaches "patreon/internal/app/usecase/attaches"
	usecase_awards "patreon/internal/app/usecase/awards"
	usecase_comments "patreon/internal/app/usecase/comments"
	usecase_creator "patreon/internal/app/usecase/creator"
	usecase_info "patreon/internal/app/usecase/info"
	usecase_likes "patreon/internal/app/usecase/likes"
	usecase_pay_token "patreon/internal/app/usecase/pay_token"
	payments "patreon/internal/app/usecase/payments"
	posts "patreon/internal/app/usecase/posts"
	statistics "patreon/internal/app/usecase/statistics"
	usecase_subscribers "patreon/internal/app/usecase/subscribers"
	usercase_user "patreon/internal/app/usecase/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseFactory is a mock of UsecaseFactory interface.
type MockUsecaseFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseFactoryMockRecorder
}

// MockUsecaseFactoryMockRecorder is the mock recorder for MockUsecaseFactory.
type MockUsecaseFactoryMockRecorder struct {
	mock *MockUsecaseFactory
}

// NewMockUsecaseFactory creates a new mock instance.
func NewMockUsecaseFactory(ctrl *gomock.Controller) *MockUsecaseFactory {
	mock := &MockUsecaseFactory{ctrl: ctrl}
	mock.recorder = &MockUsecaseFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseFactory) EXPECT() *MockUsecaseFactoryMockRecorder {
	return m.recorder
}

// GetAttachesUsecase mocks base method.
func (m *MockUsecaseFactory) GetAttachesUsecase() attaches.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachesUsecase")
	ret0, _ := ret[0].(attaches.Usecase)
	return ret0
}

// GetAttachesUsecase indicates an expected call of GetAttachesUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetAttachesUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachesUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetAttachesUsecase))
}

// GetAwardsUsecase mocks base method.
func (m *MockUsecaseFactory) GetAwardsUsecase() usecase_awards.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAwardsUsecase")
	ret0, _ := ret[0].(usecase_awards.Usecase)
	return ret0
}

// GetAwardsUsecase indicates an expected call of GetAwardsUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetAwardsUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAwardsUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetAwardsUsecase))
}

// GetCommentsUsecase mocks base method.
func (m *MockUsecaseFactory) GetCommentsUsecase() usecase_comments.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsUsecase")
	ret0, _ := ret[0].(usecase_comments.Usecase)
	return ret0
}

// GetCommentsUsecase indicates an expected call of GetCommentsUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetCommentsUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetCommentsUsecase))
}

// GetCreatorUsecase mocks base method.
func (m *MockUsecaseFactory) GetCreatorUsecase() usecase_creator.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorUsecase")
	ret0, _ := ret[0].(usecase_creator.Usecase)
	return ret0
}

// GetCreatorUsecase indicates an expected call of GetCreatorUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetCreatorUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetCreatorUsecase))
}

// GetCsrfUsecase mocks base method.
func (m *MockUsecaseFactory) GetCsrfUsecase() usecase_csrf.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCsrfUsecase")
	ret0, _ := ret[0].(usecase_csrf.Usecase)
	return ret0
}

// GetCsrfUsecase indicates an expected call of GetCsrfUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetCsrfUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCsrfUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetCsrfUsecase))
}

// GetInfoUsecase mocks base method.
func (m *MockUsecaseFactory) GetInfoUsecase() usecase_info.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoUsecase")
	ret0, _ := ret[0].(usecase_info.Usecase)
	return ret0
}

// GetInfoUsecase indicates an expected call of GetInfoUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetInfoUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetInfoUsecase))
}

// GetLikesUsecase mocks base method.
func (m *MockUsecaseFactory) GetLikesUsecase() usecase_likes.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesUsecase")
	ret0, _ := ret[0].(usecase_likes.Usecase)
	return ret0
}

// GetLikesUsecase indicates an expected call of GetLikesUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetLikesUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetLikesUsecase))
}

// GetPayTokenUsecase mocks base method.
func (m *MockUsecaseFactory) GetPayTokenUsecase() usecase_pay_token.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayTokenUsecase")
	ret0, _ := ret[0].(usecase_pay_token.Usecase)
	return ret0
}

// GetPayTokenUsecase indicates an expected call of GetPayTokenUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetPayTokenUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayTokenUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetPayTokenUsecase))
}

// GetPaymentsUsecase mocks base method.
func (m *MockUsecaseFactory) GetPaymentsUsecase() payments.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsUsecase")
	ret0, _ := ret[0].(payments.Usecase)
	return ret0
}

// GetPaymentsUsecase indicates an expected call of GetPaymentsUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetPaymentsUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetPaymentsUsecase))
}

// GetPostsUsecase mocks base method.
func (m *MockUsecaseFactory) GetPostsUsecase() posts.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsUsecase")
	ret0, _ := ret[0].(posts.Usecase)
	return ret0
}

// GetPostsUsecase indicates an expected call of GetPostsUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetPostsUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetPostsUsecase))
}

// GetStatsUsecase mocks base method.
func (m *MockUsecaseFactory) GetStatsUsecase() statistics.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsUsecase")
	ret0, _ := ret[0].(statistics.Usecase)
	return ret0
}

// GetStatsUsecase indicates an expected call of GetStatsUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetStatsUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetStatsUsecase))
}

// GetSubscribersUsecase mocks base method.
func (m *MockUsecaseFactory) GetSubscribersUsecase() usecase_subscribers.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersUsecase")
	ret0, _ := ret[0].(usecase_subscribers.Usecase)
	return ret0
}

// GetSubscribersUsecase indicates an expected call of GetSubscribersUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetSubscribersUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetSubscribersUsecase))
}

// GetUserUsecase mocks base method.
func (m *MockUsecaseFactory) GetUserUsecase() usercase_user.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUsecase")
	ret0, _ := ret[0].(usercase_user.Usecase)
	return ret0
}

// GetUserUsecase indicates an expected call of GetUserUsecase.
func (mr *MockUsecaseFactoryMockRecorder) GetUserUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUsecase", reflect.TypeOf((*MockUsecaseFactory)(nil).GetUserUsecase))
}
