// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/usecase/attaches (interfaces: Usecase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	io "io"
	models "patreon/internal/app/models"
	repository_files "patreon/internal/microservices/files/files/repository/files"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// AttachesUsecase is a mock of Usecase interface.
type AttachesUsecase struct {
	ctrl     *gomock.Controller
	recorder *AttachesUsecaseMockRecorder
}

// AttachesUsecaseMockRecorder is the mock recorder for AttachesUsecase.
type AttachesUsecaseMockRecorder struct {
	mock *AttachesUsecase
}

// NewAttachesUsecase creates a new mock instance.
func NewAttachesUsecase(ctrl *gomock.Controller) *AttachesUsecase {
	mock := &AttachesUsecase{ctrl: ctrl}
	mock.recorder = &AttachesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AttachesUsecase) EXPECT() *AttachesUsecaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *AttachesUsecase) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *AttachesUsecaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*AttachesUsecase)(nil).Delete), arg0)
}

// GetAttach mocks base method.
func (m *AttachesUsecase) GetAttach(arg0 int64) (*models.AttachWithoutLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttach", arg0)
	ret0, _ := ret[0].(*models.AttachWithoutLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttach indicates an expected call of GetAttach.
func (mr *AttachesUsecaseMockRecorder) GetAttach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttach", reflect.TypeOf((*AttachesUsecase)(nil).GetAttach), arg0)
}

// LoadAudio mocks base method.
func (m *AttachesUsecase) LoadAudio(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAudio", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAudio indicates an expected call of LoadAudio.
func (mr *AttachesUsecaseMockRecorder) LoadAudio(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAudio", reflect.TypeOf((*AttachesUsecase)(nil).LoadAudio), arg0, arg1, arg2)
}

// LoadImage mocks base method.
func (m *AttachesUsecase) LoadImage(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadImage indicates an expected call of LoadImage.
func (mr *AttachesUsecaseMockRecorder) LoadImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*AttachesUsecase)(nil).LoadImage), arg0, arg1, arg2)
}

// LoadText mocks base method.
func (m *AttachesUsecase) LoadText(arg0 *models.AttachWithoutLevel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadText", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadText indicates an expected call of LoadText.
func (mr *AttachesUsecaseMockRecorder) LoadText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadText", reflect.TypeOf((*AttachesUsecase)(nil).LoadText), arg0)
}

// LoadVideo mocks base method.
func (m *AttachesUsecase) LoadVideo(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadVideo", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadVideo indicates an expected call of LoadVideo.
func (mr *AttachesUsecaseMockRecorder) LoadVideo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadVideo", reflect.TypeOf((*AttachesUsecase)(nil).LoadVideo), arg0, arg1, arg2)
}

// UpdateAttach mocks base method.
func (m *AttachesUsecase) UpdateAttach(arg0 int64, arg1, arg2 []models.Attach) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttach", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttach indicates an expected call of UpdateAttach.
func (mr *AttachesUsecaseMockRecorder) UpdateAttach(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttach", reflect.TypeOf((*AttachesUsecase)(nil).UpdateAttach), arg0, arg1, arg2)
}

// UpdateAudio mocks base method.
func (m *AttachesUsecase) UpdateAudio(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAudio", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAudio indicates an expected call of UpdateAudio.
func (mr *AttachesUsecaseMockRecorder) UpdateAudio(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAudio", reflect.TypeOf((*AttachesUsecase)(nil).UpdateAudio), arg0, arg1, arg2)
}

// UpdateImage mocks base method.
func (m *AttachesUsecase) UpdateImage(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *AttachesUsecaseMockRecorder) UpdateImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*AttachesUsecase)(nil).UpdateImage), arg0, arg1, arg2)
}

// UpdateText mocks base method.
func (m *AttachesUsecase) UpdateText(arg0 *models.AttachWithoutLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateText indicates an expected call of UpdateText.
func (mr *AttachesUsecaseMockRecorder) UpdateText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*AttachesUsecase)(nil).UpdateText), arg0)
}

// UpdateVideo mocks base method.
func (m *AttachesUsecase) UpdateVideo(arg0 io.Reader, arg1 repository_files.FileName, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideo indicates an expected call of UpdateVideo.
func (mr *AttachesUsecaseMockRecorder) UpdateVideo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*AttachesUsecase)(nil).UpdateVideo), arg0, arg1, arg2)
}
