// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/usecase/access (interfaces: Usecase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// AccessUsecase is a mock of Usecase interface.
type AccessUsecase struct {
	ctrl     *gomock.Controller
	recorder *AccessUsecaseMockRecorder
}

// AccessUsecaseMockRecorder is the mock recorder for AccessUsecase.
type AccessUsecaseMockRecorder struct {
	mock *AccessUsecase
}

// NewAccessUsecase creates a new mock instance.
func NewAccessUsecase(ctrl *gomock.Controller) *AccessUsecase {
	mock := &AccessUsecase{ctrl: ctrl}
	mock.recorder = &AccessUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AccessUsecase) EXPECT() *AccessUsecaseMockRecorder {
	return m.recorder
}

// AddToBlackList mocks base method.
func (m *AccessUsecase) AddToBlackList(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlackList", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlackList indicates an expected call of AddToBlackList.
func (mr *AccessUsecaseMockRecorder) AddToBlackList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlackList", reflect.TypeOf((*AccessUsecase)(nil).AddToBlackList), arg0)
}

// CheckAccess mocks base method.
func (m *AccessUsecase) CheckAccess(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *AccessUsecaseMockRecorder) CheckAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*AccessUsecase)(nil).CheckAccess), arg0)
}

// CheckBlackList mocks base method.
func (m *AccessUsecase) CheckBlackList(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBlackList", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBlackList indicates an expected call of CheckBlackList.
func (mr *AccessUsecaseMockRecorder) CheckBlackList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBlackList", reflect.TypeOf((*AccessUsecase)(nil).CheckBlackList), arg0)
}

// Create mocks base method.
func (m *AccessUsecase) Create(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *AccessUsecaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*AccessUsecase)(nil).Create), arg0)
}

// Update mocks base method.
func (m *AccessUsecase) Update(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *AccessUsecaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*AccessUsecase)(nil).Update), arg0)
}
