// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/usecase/statistics (interfaces: Usecase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// StatisticsUsecase is a mock of Usecase interface.
type StatisticsUsecase struct {
	ctrl     *gomock.Controller
	recorder *StatisticsUsecaseMockRecorder
}

// StatisticsUsecaseMockRecorder is the mock recorder for StatisticsUsecase.
type StatisticsUsecaseMockRecorder struct {
	mock *StatisticsUsecase
}

// NewStatisticsUsecase creates a new mock instance.
func NewStatisticsUsecase(ctrl *gomock.Controller) *StatisticsUsecase {
	mock := &StatisticsUsecase{ctrl: ctrl}
	mock.recorder = &StatisticsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *StatisticsUsecase) EXPECT() *StatisticsUsecaseMockRecorder {
	return m.recorder
}

// GetCountCreatorPosts mocks base method.
func (m *StatisticsUsecase) GetCountCreatorPosts(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCreatorPosts", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCreatorPosts indicates an expected call of GetCountCreatorPosts.
func (mr *StatisticsUsecaseMockRecorder) GetCountCreatorPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCreatorPosts", reflect.TypeOf((*StatisticsUsecase)(nil).GetCountCreatorPosts), arg0)
}

// GetCountCreatorSubscribers mocks base method.
func (m *StatisticsUsecase) GetCountCreatorSubscribers(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCreatorSubscribers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCreatorSubscribers indicates an expected call of GetCountCreatorSubscribers.
func (mr *StatisticsUsecaseMockRecorder) GetCountCreatorSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCreatorSubscribers", reflect.TypeOf((*StatisticsUsecase)(nil).GetCountCreatorSubscribers), arg0)
}

// GetCountCreatorViews mocks base method.
func (m *StatisticsUsecase) GetCountCreatorViews(arg0, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCreatorViews", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCreatorViews indicates an expected call of GetCountCreatorViews.
func (mr *StatisticsUsecaseMockRecorder) GetCountCreatorViews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCreatorViews", reflect.TypeOf((*StatisticsUsecase)(nil).GetCountCreatorViews), arg0, arg1)
}

// GetTotalIncome mocks base method.
func (m *StatisticsUsecase) GetTotalIncome(arg0, arg1 int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalIncome", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalIncome indicates an expected call of GetTotalIncome.
func (mr *StatisticsUsecaseMockRecorder) GetTotalIncome(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalIncome", reflect.TypeOf((*StatisticsUsecase)(nil).GetTotalIncome), arg0, arg1)
}
