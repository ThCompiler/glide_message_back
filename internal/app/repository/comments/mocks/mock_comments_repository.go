// Code generated by MockGen. DO NOT EDIT.
// Source: glide/internal/app/repository/comments (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "glide/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// CommentsRepository is a mock of Repository interface.
type CommentsRepository struct {
	ctrl     *gomock.Controller
	recorder *CommentsRepositoryMockRecorder
}

// CommentsRepositoryMockRecorder is the mock recorder for CommentsRepository.
type CommentsRepositoryMockRecorder struct {
	mock *CommentsRepository
}

// NewCommentsRepository creates a new mock instance.
func NewCommentsRepository(ctrl *gomock.Controller) *CommentsRepository {
	mock := &CommentsRepository{ctrl: ctrl}
	mock.recorder = &CommentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CommentsRepository) EXPECT() *CommentsRepositoryMockRecorder {
	return m.recorder
}

// CheckExists mocks base method.
func (m *CommentsRepository) CheckExists(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExists indicates an expected call of CheckExists.
func (mr *CommentsRepositoryMockRecorder) CheckExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*CommentsRepository)(nil).CheckExists), arg0)
}

// Create mocks base method.
func (m *CommentsRepository) Create(arg0 *models.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *CommentsRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*CommentsRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *CommentsRepository) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *CommentsRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*CommentsRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *CommentsRepository) Get(arg0 int64) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *CommentsRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*CommentsRepository)(nil).Get), arg0)
}

// GetPostComments mocks base method.
func (m *CommentsRepository) GetPostComments(arg0 int64, arg1 *models.Pagination) ([]models.PostComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostComments", arg0, arg1)
	ret0, _ := ret[0].([]models.PostComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostComments indicates an expected call of GetPostComments.
func (mr *CommentsRepositoryMockRecorder) GetPostComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostComments", reflect.TypeOf((*CommentsRepository)(nil).GetPostComments), arg0, arg1)
}

// GetUserComments mocks base method.
func (m *CommentsRepository) GetUserComments(arg0 int64, arg1 *models.Pagination) ([]models.UserComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserComments", arg0, arg1)
	ret0, _ := ret[0].([]models.UserComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserComments indicates an expected call of GetUserComments.
func (mr *CommentsRepositoryMockRecorder) GetUserComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserComments", reflect.TypeOf((*CommentsRepository)(nil).GetUserComments), arg0, arg1)
}

// Update mocks base method.
func (m *CommentsRepository) Update(arg0 *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *CommentsRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*CommentsRepository)(nil).Update), arg0)
}
