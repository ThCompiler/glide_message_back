// Code generated by MockGen. DO NOT EDIT.
// Source: glide/internal/app/repository/attaches (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "glide/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// AttachesRepository is a mock of Repository interface.
type AttachesRepository struct {
	ctrl     *gomock.Controller
	recorder *AttachesRepositoryMockRecorder
}

// AttachesRepositoryMockRecorder is the mock recorder for AttachesRepository.
type AttachesRepositoryMockRecorder struct {
	mock *AttachesRepository
}

// NewAttachesRepository creates a new mock instance.
func NewAttachesRepository(ctrl *gomock.Controller) *AttachesRepository {
	mock := &AttachesRepository{ctrl: ctrl}
	mock.recorder = &AttachesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AttachesRepository) EXPECT() *AttachesRepositoryMockRecorder {
	return m.recorder
}

// ApplyChangeAttaches mocks base method.
func (m *AttachesRepository) ApplyChangeAttaches(arg0 int64, arg1, arg2 []models.Attach) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChangeAttaches", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyChangeAttaches indicates an expected call of ApplyChangeAttaches.
func (mr *AttachesRepositoryMockRecorder) ApplyChangeAttaches(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChangeAttaches", reflect.TypeOf((*AttachesRepository)(nil).ApplyChangeAttaches), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *AttachesRepository) Create(arg0 *models.AttachWithoutLevel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *AttachesRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*AttachesRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *AttachesRepository) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *AttachesRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*AttachesRepository)(nil).Delete), arg0)
}

// ExistsAttach mocks base method.
func (m *AttachesRepository) ExistsAttach(arg0 ...int64) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExistsAttach", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsAttach indicates an expected call of ExistsAttach.
func (mr *AttachesRepositoryMockRecorder) ExistsAttach(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsAttach", reflect.TypeOf((*AttachesRepository)(nil).ExistsAttach), arg0...)
}

// Get mocks base method.
func (m *AttachesRepository) Get(arg0 int64) (*models.AttachWithoutLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.AttachWithoutLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *AttachesRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*AttachesRepository)(nil).Get), arg0)
}

// GetAttaches mocks base method.
func (m *AttachesRepository) GetAttaches(arg0 int64) ([]models.AttachWithoutLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttaches", arg0)
	ret0, _ := ret[0].([]models.AttachWithoutLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttaches indicates an expected call of GetAttaches.
func (mr *AttachesRepositoryMockRecorder) GetAttaches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttaches", reflect.TypeOf((*AttachesRepository)(nil).GetAttaches), arg0)
}

// Update mocks base method.
func (m *AttachesRepository) Update(arg0 *models.AttachWithoutLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *AttachesRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*AttachesRepository)(nil).Update), arg0)
}
