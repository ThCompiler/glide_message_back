// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/repository/access (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// AccessRepository is a mock of Repository interface.
type AccessRepository struct {
	ctrl     *gomock.Controller
	recorder *AccessRepositoryMockRecorder
}

// AccessRepositoryMockRecorder is the mock recorder for AccessRepository.
type AccessRepositoryMockRecorder struct {
	mock *AccessRepository
}

// NewAccessRepository creates a new mock instance.
func NewAccessRepository(ctrl *gomock.Controller) *AccessRepository {
	mock := &AccessRepository{ctrl: ctrl}
	mock.recorder = &AccessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AccessRepository) EXPECT() *AccessRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *AccessRepository) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *AccessRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*AccessRepository)(nil).Get), arg0)
}

// Increment mocks base method.
func (m *AccessRepository) Increment(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *AccessRepositoryMockRecorder) Increment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*AccessRepository)(nil).Increment), arg0)
}

// Set mocks base method.
func (m *AccessRepository) Set(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *AccessRepositoryMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*AccessRepository)(nil).Set), arg0, arg1, arg2)
}
