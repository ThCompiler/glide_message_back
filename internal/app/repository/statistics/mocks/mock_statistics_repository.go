// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/repository/statistics (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// StatisticsRepository is a mock of Repository interface.
type StatisticsRepository struct {
	ctrl     *gomock.Controller
	recorder *StatisticsRepositoryMockRecorder
}

// StatisticsRepositoryMockRecorder is the mock recorder for StatisticsRepository.
type StatisticsRepositoryMockRecorder struct {
	mock *StatisticsRepository
}

// NewStatisticsRepository creates a new mock instance.
func NewStatisticsRepository(ctrl *gomock.Controller) *StatisticsRepository {
	mock := &StatisticsRepository{ctrl: ctrl}
	mock.recorder = &StatisticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *StatisticsRepository) EXPECT() *StatisticsRepositoryMockRecorder {
	return m.recorder
}

// CreatorExists mocks base method.
func (m *StatisticsRepository) CreatorExists(arg0 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatorExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatorExists indicates an expected call of CreatorExists.
func (mr *StatisticsRepositoryMockRecorder) CreatorExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorExists", reflect.TypeOf((*StatisticsRepository)(nil).CreatorExists), arg0)
}

// GetCountCreatorPosts mocks base method.
func (m *StatisticsRepository) GetCountCreatorPosts(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCreatorPosts", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCreatorPosts indicates an expected call of GetCountCreatorPosts.
func (mr *StatisticsRepositoryMockRecorder) GetCountCreatorPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCreatorPosts", reflect.TypeOf((*StatisticsRepository)(nil).GetCountCreatorPosts), arg0)
}

// GetCountCreatorSubscribers mocks base method.
func (m *StatisticsRepository) GetCountCreatorSubscribers(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCreatorSubscribers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCreatorSubscribers indicates an expected call of GetCountCreatorSubscribers.
func (mr *StatisticsRepositoryMockRecorder) GetCountCreatorSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCreatorSubscribers", reflect.TypeOf((*StatisticsRepository)(nil).GetCountCreatorSubscribers), arg0)
}

// GetCountCreatorViews mocks base method.
func (m *StatisticsRepository) GetCountCreatorViews(arg0, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCreatorViews", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCreatorViews indicates an expected call of GetCountCreatorViews.
func (mr *StatisticsRepositoryMockRecorder) GetCountCreatorViews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCreatorViews", reflect.TypeOf((*StatisticsRepository)(nil).GetCountCreatorViews), arg0, arg1)
}

// GetTotalIncome mocks base method.
func (m *StatisticsRepository) GetTotalIncome(arg0, arg1 int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalIncome", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalIncome indicates an expected call of GetTotalIncome.
func (mr *StatisticsRepositoryMockRecorder) GetTotalIncome(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalIncome", reflect.TypeOf((*StatisticsRepository)(nil).GetTotalIncome), arg0, arg1)
}
