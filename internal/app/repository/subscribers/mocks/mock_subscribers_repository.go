// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/repository/subscribers (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "patreon/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// SubscribersRepository is a mock of Repository interface.
type SubscribersRepository struct {
	ctrl     *gomock.Controller
	recorder *SubscribersRepositoryMockRecorder
}

// SubscribersRepositoryMockRecorder is the mock recorder for SubscribersRepository.
type SubscribersRepositoryMockRecorder struct {
	mock *SubscribersRepository
}

// NewSubscribersRepository creates a new mock instance.
func NewSubscribersRepository(ctrl *gomock.Controller) *SubscribersRepository {
	mock := &SubscribersRepository{ctrl: ctrl}
	mock.recorder = &SubscribersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SubscribersRepository) EXPECT() *SubscribersRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *SubscribersRepository) Create(arg0 *models.Subscriber, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *SubscribersRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*SubscribersRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *SubscribersRepository) Delete(arg0 *models.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *SubscribersRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*SubscribersRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *SubscribersRepository) Get(arg0 *models.Subscriber) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *SubscribersRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*SubscribersRepository)(nil).Get), arg0)
}

// GetCreators mocks base method.
func (m *SubscribersRepository) GetCreators(arg0 int64) ([]models.CreatorSubscribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreators", arg0)
	ret0, _ := ret[0].([]models.CreatorSubscribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreators indicates an expected call of GetCreators.
func (mr *SubscribersRepositoryMockRecorder) GetCreators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreators", reflect.TypeOf((*SubscribersRepository)(nil).GetCreators), arg0)
}

// GetSubscribers mocks base method.
func (m *SubscribersRepository) GetSubscribers(arg0 int64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", arg0)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *SubscribersRepositoryMockRecorder) GetSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*SubscribersRepository)(nil).GetSubscribers), arg0)
}
