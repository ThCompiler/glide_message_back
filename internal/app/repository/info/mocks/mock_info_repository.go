// Code generated by MockGen. DO NOT EDIT.
// Source: glide/internal/app/repository/info (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "glide/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// InfoRepository is a mock of Repository interface.
type InfoRepository struct {
	ctrl     *gomock.Controller
	recorder *InfoRepositoryMockRecorder
}

// InfoRepositoryMockRecorder is the mock recorder for InfoRepository.
type InfoRepositoryMockRecorder struct {
	mock *InfoRepository
}

// NewInfoRepository creates a new mock instance.
func NewInfoRepository(ctrl *gomock.Controller) *InfoRepository {
	mock := &InfoRepository{ctrl: ctrl}
	mock.recorder = &InfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *InfoRepository) EXPECT() *InfoRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *InfoRepository) Get() (*models.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*models.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *InfoRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*InfoRepository)(nil).Get))
}
