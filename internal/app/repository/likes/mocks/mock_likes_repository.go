// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/repository/likes (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "patreon/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// LikesRepository is a mock of Repository interface.
type LikesRepository struct {
	ctrl     *gomock.Controller
	recorder *LikesRepositoryMockRecorder
}

// LikesRepositoryMockRecorder is the mock recorder for LikesRepository.
type LikesRepositoryMockRecorder struct {
	mock *LikesRepository
}

// NewLikesRepository creates a new mock instance.
func NewLikesRepository(ctrl *gomock.Controller) *LikesRepository {
	mock := &LikesRepository{ctrl: ctrl}
	mock.recorder = &LikesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LikesRepository) EXPECT() *LikesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *LikesRepository) Add(arg0 *models.Like) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *LikesRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*LikesRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *LikesRepository) Delete(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *LikesRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*LikesRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *LikesRepository) Get(arg0 int64) (*models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *LikesRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*LikesRepository)(nil).Get), arg0)
}

// GetLikeId mocks base method.
func (m *LikesRepository) GetLikeId(arg0, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeId indicates an expected call of GetLikeId.
func (mr *LikesRepositoryMockRecorder) GetLikeId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeId", reflect.TypeOf((*LikesRepository)(nil).GetLikeId), arg0, arg1)
}
