// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/microservices/files/files/repository/files (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	io "io"
	repository_files "patreon/internal/microservices/files/files/repository/files"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// FilesRepository is a mock of Repository interface.
type FilesRepository struct {
	ctrl     *gomock.Controller
	recorder *FilesRepositoryMockRecorder
}

// FilesRepositoryMockRecorder is the mock recorder for FilesRepository.
type FilesRepositoryMockRecorder struct {
	mock *FilesRepository
}

// NewFilesRepository creates a new mock instance.
func NewFilesRepository(ctrl *gomock.Controller) *FilesRepository {
	mock := &FilesRepository{ctrl: ctrl}
	mock.recorder = &FilesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FilesRepository) EXPECT() *FilesRepositoryMockRecorder {
	return m.recorder
}

// LoadFile mocks base method.
func (m *FilesRepository) LoadFile(arg0 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFile", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFile indicates an expected call of LoadFile.
func (mr *FilesRepositoryMockRecorder) LoadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFile", reflect.TypeOf((*FilesRepository)(nil).LoadFile), arg0)
}

// SaveFile mocks base method.
func (m *FilesRepository) SaveFile(arg0 io.Reader, arg1 repository_files.FileName, arg2 repository_files.TypeFiles) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *FilesRepositoryMockRecorder) SaveFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*FilesRepository)(nil).SaveFile), arg0, arg1, arg2)
}
