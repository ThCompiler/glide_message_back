// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package push_models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7aa4b9ffDecodeGlideInternalMicroservicesPushPush(in *jlexer.Lexer, out *MessagePush) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatId = int64(in.Int64())
		case "companion":
			out.Companion = string(in.String())
		case "companion_avatar":
			out.CompanionAvatar = string(in.String())
		case "message_id":
			out.MessageId = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7aa4b9ffEncodeGlideInternalMicroservicesPushPush(out *jwriter.Writer, in MessagePush) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChatId))
	}
	{
		const prefix string = ",\"companion\":"
		out.RawString(prefix)
		out.String(string(in.Companion))
	}
	{
		const prefix string = ",\"companion_avatar\":"
		out.RawString(prefix)
		out.String(string(in.CompanionAvatar))
	}
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MessageId))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessagePush) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7aa4b9ffEncodeGlideInternalMicroservicesPushPush(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessagePush) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7aa4b9ffEncodeGlideInternalMicroservicesPushPush(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessagePush) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7aa4b9ffDecodeGlideInternalMicroservicesPushPush(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessagePush) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7aa4b9ffDecodeGlideInternalMicroservicesPushPush(l, v)
}
func easyjson7aa4b9ffDecodeGlideInternalMicroservicesPushPush1(in *jlexer.Lexer, out *GlidePush) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "author_avatar":
			out.AuthorAvatar = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7aa4b9ffEncodeGlideInternalMicroservicesPushPush1(out *jwriter.Writer, in GlidePush) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"author_avatar\":"
		out.RawString(prefix)
		out.String(string(in.AuthorAvatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlidePush) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7aa4b9ffEncodeGlideInternalMicroservicesPushPush1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlidePush) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7aa4b9ffEncodeGlideInternalMicroservicesPushPush1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlidePush) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7aa4b9ffDecodeGlideInternalMicroservicesPushPush1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlidePush) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7aa4b9ffDecodeGlideInternalMicroservicesPushPush1(l, v)
}
